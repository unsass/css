// ============================================================================================= //
//                                             TEST                                              //
// ============================================================================================= //

@use "true" as *;
@use "../index" as css;
@use "../custom-properties";

@include describe("mixins") {
    @include describe("declaration()") {
        @include it("Should return a css declaration.") {
            @include assert {
                @include output(false) {
                    .foo {
                        @include css.declaration(color, darkcyan);
                    }
                }

                @include expect(false) {
                    .foo {
                        color: darkcyan;
                    }
                }
            }
        }

        @include it("Should return a css declaration with custom property.") {
            @include assert {
                @include output(false) {
                    .test {
                        @include css.declaration(--foo, darkcyan);
                    }
                }

                @include expect(false) {
                    .test {
                        --foo: darkcyan;
                    }
                }
            }
        }

        @include it("Should return a css declaration with `!important` option.") {
            @include assert {
                @include output(false) {
                    .foo {
                        @include css.declaration(color, darkcyan, true);
                    }
                }

                @include expect(false) {
                    .foo {
                        color: darkcyan !important;
                    }
                }
            }
        }

        @include it("Should return a css mixed declaration.") {
            @include assert {
                @include output(false) {
                    .foo {
                        @include css.declaration(box-shadow, (0 0 10px 5px rgba(darkcyan, 0.75), inset 0 0 10px 5px rgba(darkcyan, 0.75)));
                    }
                }

                @include expect(false) {
                    .foo {
                        box-shadow: 0 0 10px 5px rgba(0, 139, 139, 0.75), inset 0 0 10px 5px rgba(0, 139, 139, 0.75);
                    }
                }
            }
        }
    }

    @include describe("declaration() with custom properties") {
        @include it("Should return a css declaration with custom property from `custom-properties.create()` function.") {
            @include assert {
                @include output(false) {
                    .test {
                        @include css.declaration(custom-properties.create(--foo, darkcyan));
                    }
                }

                @include expect(false) {
                    .test {
                        --foo: darkcyan;
                    }
                }
            }
        }

        @include it("Should return a css declaration with custom property from `custom-properties.create()` function with missing `--`.") {
            @include assert {
                @include output(false) {
                    .test {
                        @include css.declaration(custom-properties.create(foo, darkcyan));
                    }
                }

                @include expect(false) {
                    .test {
                        --foo: darkcyan;
                    }
                }
            }
        }

        @include it("Should return a css declaration with `var()`.") {
            @include assert {
                @include output(false) {
                    .test {
                        @include css.declaration(color, custom-properties.create(--foo, darkcyan));
                    }
                }

                @include expect(false) {
                    .test {
                        color: var(--foo, darkcyan);
                    }
                }
            }
        }

        @include it("Should return a css declaration with nested `var()`.") {
            @include assert {
                @include output(false) {
                    .test {
                        @include css.declaration(color, custom-properties.create(--foo, custom-properties.create(--bar, darkcyan)));
                    }
                }

                @include expect(false) {
                    .test {
                        color: var(--foo, var(--bar, darkcyan));
                    }
                }
            }
        }
    }
}
