// ============================================================================================= //
//                                             TEST                                              //
// ============================================================================================= //

@use "true" as *;
@use "../index" as css;
@use "../custom-properties";

@include describe("css.declaration().") {
    @include it("Should return a css declaration.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.declaration(color, darkcyan);
                }
            }

            @include expect(false) {
                .foo {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return a css declaration with custom property.") {
        @include assert {
            @include output(false) {
                .test {
                    @include css.declaration(--foo, darkcyan);
                }
            }

            @include expect(false) {
                .test {
                    --foo: darkcyan;
                }
            }
        }
    }

    @include it("Should return a css declaration with `!important` option.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.declaration(color, darkcyan, true);
                }
            }

            @include expect(false) {
                .foo {
                    color: darkcyan !important;
                }
            }
        }
    }

    @include it("Should return a css mixed declaration.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.declaration(box-shadow, (0 0 10px 5px rgba(darkcyan, 0.75), inset 0 0 10px 5px rgba(darkcyan, 0.75)));
                }
            }

            @include expect(false) {
                .foo {
                    box-shadow: 0 0 10px 5px rgba(0, 139, 139, 0.75), inset 0 0 10px 5px rgba(0, 139, 139, 0.75);
                }
            }
        }
    }
}

@include describe("css.declaration() with custom properties.") {
    @include it("Should return a css declaration with custom property from `custom-properties.create()` function.") {
        @include assert {
            @include output(false) {
                .test {
                    @include css.declaration(custom-properties.create(--foo, darkcyan));
                }
            }

            @include expect(false) {
                .test {
                    --foo: darkcyan;
                }
            }
        }
    }

    @include it("Should return a css declaration with custom property from `custom-properties.create()` function with missing `--`.") {
        @include assert {
            @include output(false) {
                .test {
                    @include css.declaration(custom-properties.create(foo, darkcyan));
                }
            }

            @include expect(false) {
                .test {
                    --foo: darkcyan;
                }
            }
        }
    }

    @include it("Should return a css declaration with `var()`.") {
        @include assert {
            @include output(false) {
                .test {
                    @include css.declaration(color, custom-properties.create(--foo, darkcyan));
                }
            }

            @include expect(false) {
                .test {
                    color: var(--foo, darkcyan);
                }
            }
        }
    }

    @include it("Should return a css declaration with nested `var()`.") {
        @include assert {
            @include output(false) {
                .test {
                    @include css.declaration(color, custom-properties.create(--foo, custom-properties.create(--bar, darkcyan)));
                }
            }

            @include expect(false) {
                .test {
                    color: var(--foo, var(--bar, darkcyan));
                }
            }
        }
    }
}

@include describe("css.selector()") {
    @include it("Should return prefixed selector.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.selector("md") {
                        color: darkcyan;
                    }
                }
            }

            @include expect(false) {
                .md\:foo {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return prefixed selector with custom separator.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.selector("md", "@") {
                        color: darkcyan;
                    }
                }
            }

            @include expect(false) {
                .md\@foo {
                    color: darkcyan;
                }
            }
        }
    }



    @include it("Should return prefixed selector with numbers.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.selector("2xl") {
                        color: darkcyan;
                    }
                }
            }

            @include expect(false) {
                .\32 xl\:foo {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return suffixed selector.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.selector("md", $suffix: true) {
                        color: darkcyan;
                    }
                }
            }

            @include expect(false) {
                .foo\:md {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return suffixed selector with custom separator.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.selector("md", "@", true) {
                        color: darkcyan;
                    }
                }
            }

            @include expect(false) {
                .foo\@md {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return suffixed selector with numbers.") {
        @include assert {
            @include output(false) {
                .foo {
                    @include css.selector("2xl", $suffix: true) {
                        color: darkcyan;
                    }
                }
            }

            @include expect(false) {
                .foo\:2xl {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return prefixed custom selector.") {
        @include assert {
            @include output(false) {
                @include css.selector("md", $selector: ".foo") {
                    color: darkcyan;
                }
            }

            @include expect(false) {
                .md\:foo {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return prefixed custom selector.") {
        @include assert {
            @include output(false) {
                @include css.selector("md", $selector: ".foo") {
                    color: darkcyan;
                }
            }

            @include expect(false) {
                .md\:foo {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return prefixed custom selector with custom separator.") {
        @include assert {
            @include output(false) {
                @include css.selector("md", "@", $selector: ".foo") {
                    color: darkcyan;
                }
            }

            @include expect(false) {
                .md\@foo {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return suffixed custom selector.") {
        @include assert {
            @include output(false) {
                @include css.selector("md", $suffix: true, $selector: ".foo") {
                    color: darkcyan;
                }
            }

            @include expect(false) {
                .foo\:md {
                    color: darkcyan;
                }
            }
        }
    }

    @include it("Should return suffixed custom selector with custom separator.") {
        @include assert {
            @include output(false) {
                @include css.selector("md", "@", true, ".foo") {
                    color: darkcyan;
                }
            }

            @include expect(false) {
                .foo\@md {
                    color: darkcyan;
                }
            }
        }
    }
}
